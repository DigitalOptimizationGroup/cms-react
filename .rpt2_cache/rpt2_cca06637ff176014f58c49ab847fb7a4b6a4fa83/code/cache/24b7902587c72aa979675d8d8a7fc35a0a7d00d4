{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport { Context } from \"./Context\";\r\nimport { isArgsEqual } from \"./isArgsEqual\";\r\nexport const featureProvider = (WrappedComponent) => {\r\n    class ConnectFeature extends React.Component {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.state = {\r\n                isLoading: true,\r\n                variation: null,\r\n                tracking: null,\r\n                error: null\r\n            };\r\n            this.subscribeToFeature = ({ cms, queryName, args = {} }) => {\r\n                return cms({\r\n                    queryName,\r\n                    args\r\n                }).subscribe({\r\n                    next: feature => {\r\n                        this.setState({\r\n                            isLoading: false,\r\n                            variation: feature.variation,\r\n                            tracking: feature.tracking\r\n                        });\r\n                    },\r\n                    error: e => {\r\n                        if (e.status === 404) {\r\n                            this.setState({\r\n                                isLoading: false,\r\n                                error: {\r\n                                    message: \"404 - Feature not found\",\r\n                                    code: 404\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            this.setState({\r\n                                isLoading: false,\r\n                                error: {\r\n                                    message: \"500 - API Error\",\r\n                                    code: 500\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        componentWillMount() {\r\n            // if server\r\n            // do the stuff\r\n            // embed the data into the worker so we can be sync here\r\n            if (typeof self !== \"undefined\" && typeof window === \"undefined\") {\r\n                console.log(\"self !== undefined\");\r\n                this.subscription = this.subscribeToFeature(this.props);\r\n            }\r\n        }\r\n        componentDidMount() {\r\n            this.subscription = this.subscribeToFeature(this.props);\r\n        }\r\n        componentWillUnmount() {\r\n            this.subscription && this.subscription.unsubscribe();\r\n        }\r\n        componentWillReceiveProps(nextProps) {\r\n            const { queryName, args } = this.props;\r\n            // this check allows the subscribed feature to change when the args change\r\n            // such as by the url changing but the component still being mounted\r\n            if (queryName !== nextProps.queryName ||\r\n                !isArgsEqual(args, nextProps.args)) {\r\n                this.setState({\r\n                    isLoading: true,\r\n                    error: null\r\n                });\r\n                // Underlying webSocket is ref counted, and this might be the only\r\n                // subscription at this point, so we want to make sure we subscribe to\r\n                // our new feature before unsubscribing from the old one, so the socket\r\n                // doesn't close.\r\n                const nextSub = this.subscribeToFeature(nextProps);\r\n                this.subscription.unsubscribe();\r\n                this.subscription = nextSub;\r\n            }\r\n        }\r\n        render() {\r\n            const { error, variation, tracking, isLoading } = this.state;\r\n            const _a = this.props, { cms } = _a, rest = tslib_1.__rest(_a, [\"cms\"]);\r\n            return (React.createElement(WrappedComponent, Object.assign({}, rest, { variation: variation, tracking: tracking, isLoading: isLoading, error: error })));\r\n        }\r\n    }\r\n    return props => {\r\n        return (React.createElement(Context.Consumer, null, ({ cms }) => {\r\n            return React.createElement(ConnectFeature, Object.assign({ cms: cms }, props));\r\n        }));\r\n    };\r\n};\r\n","references":["/home/shalom/Documents/az/G/github/cms-react/node_modules/@types/react/index.d.ts","/home/shalom/Documents/az/G/github/cms-react/src/Context.js","/home/shalom/Documents/az/G/github/cms-react/src/isArgsEqual.js"],"dts":{"name":"/home/shalom/Documents/az/G/github/cms-react/featureProvider.d.ts","writeByteOrderMark":false,"text":"import * as React from \"react\";\r\nexport interface FeatureProvider {\r\n    Track?: any;\r\n    (props: any): React.ReactElement;\r\n}\r\nexport declare const featureProvider: (WrappedComponent: any) => FeatureProvider;\r\n"}}
